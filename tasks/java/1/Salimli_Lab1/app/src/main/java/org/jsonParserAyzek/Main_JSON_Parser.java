/*
 * This source file was generated by the Gradle 'init' task
 */

package org.jsonParserAyzek;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.reflect.*;
import java.util.*;

class minUI{
    private static final int length = 40;
    public void start(String ttask){
        System.out.println();
        System.out.println();
        for(int i = 0; i < length; i++){
            System.out.print("\\");
        }
        System.out.print(" ");
        System.out.print(ttask);
        System.out.print(" ");
        for(int i = 0; i < length; i++){
            System.out.print("/");
        }
        System.out.println();
        System.out.println();
    }
    public void end(String task){
        System.out.println();
        for(int i = 0; i < length * 2 + task.length() + 2; i++){
            System.out.print("=");
        }
        System.out.println();
        System.out.println();
    }
}

public class Main_JSON_Parser {

    public static Map<String, Object> JSONIntoMAP(String json) {
        json = json.trim();
        if (!json.startsWith("{") || !json.endsWith("}")) {
            throw new IllegalArgumentException("С форматом JSON что-то не так...");
        }
        json = json.substring(1, json.length() - 1).trim();
        Map<String, Object> result = new HashMap<>();

        while (!json.isEmpty()) {
            int colonIndex = json.indexOf(":");
            if (colonIndex == -1) break;

            String key = json.substring(0, colonIndex).trim().replaceAll("\"", "");
            json = json.substring(colonIndex + 1).trim();

            Object value;
            if (json.startsWith("\"")) {
                int endIndex = json.indexOf("\"", 1);
                value = json.substring(1, endIndex);
                json = json.substring(endIndex + 1).trim();
            } else if (json.startsWith("{")) {
                int endIndex = checkBrace1(json);
                value = JSONIntoMAP(json.substring(0, endIndex + 1));
                json = json.substring(endIndex + 1).trim();
            } else if (json.startsWith("[")) {
                int endIndex = checkBrace2(json);
                value = parsingJSON_Array(json.substring(0, endIndex + 1));
                json = json.substring(endIndex + 1).trim();
            } else {
                int endIndex = json.indexOf(",");
                if (endIndex == -1) endIndex = json.length();
                value = parsePrimWords(json.substring(0, endIndex));
                json = json.substring(endIndex).trim();
            }

            result.put(key, value);
            if (json.startsWith(",")) {
                json = json.substring(1).trim();
            }
        }
        return result;
    }

    private static int checkBrace1(String json) {
        int count = 0;
        boolean inStr = false;
        for (int i = 0; i < json.length(); i++) {
            char c = json.charAt(i);
            if (c == '"' && (i == 0 || json.charAt(i - 1) != '\\')) {
                inStr = !inStr;
            }
            if (!inStr) {
                if (c == '{') count++;
                if (c == '}') count--;
                if (count == 0)
                    return i;
            }
        }
        throw new IllegalArgumentException("Забыли закрыть скобки типа {}");
    }

    private static int checkBrace2(String json) {
        int count = 0;
        boolean inStr = false;
        for (int i = 0; i < json.length(); i++) {
            char c = json.charAt(i);
            if (c == '"' && (i == 0 || json.charAt(i - 1) != '\\')) {
                inStr = !inStr;
            }
            if (!inStr) {
                if (c == '[') count++;
                if (c == ']') count--;
                if (count == 0)
                    return i;
            }
        }
        throw new IllegalArgumentException("Забыли закрыть скобки типа []");
    }

    private static Object parseJSONValue(String json) {
        json = json.trim();
        if (json.isEmpty()) return null;
        if (json.startsWith("\"")) {
            StringBuilder sb = new StringBuilder();
            boolean escape = false;
            for (int i = 1; i < json.length(); i++) {
                char c = json.charAt(i);
                if (escape) {
                    sb.append(c);
                    escape = false;
                } else if (c == '\\') {
                    escape = true;
                } else if (c == '"') {
                    return sb.toString();
                } else {
                    sb.append(c);
                }
            }
            return sb.toString();
        } else if (json.startsWith("{")) {
            int endIndex = checkBrace1(json);
            return JSONIntoMAP(json.substring(0, endIndex + 1));
        } else if (json.startsWith("[")) {
            int endIndex = checkBrace2(json);
            return parsingJSON_Array(json.substring(0, endIndex + 1));
        } else {
            return parsePrimWords(json);
        }
    }

    private static List<Object> parsingJSON_Array(String json) {
        json = json.substring(1, json.length() - 1).trim();
        List<Object> list = new ArrayList<>();
        if (!json.startsWith("[") || !json.endsWith("]")) {
            throw new IllegalArgumentException("Неправильный формат JSON массива");
        }
        String inner = json.substring(1, json.length() - 1).trim();
        if (inner.isEmpty()) {
            return list;
        }
        int start = 0;
        int len = inner.length();
        int braceCount = 0;
        int bracketCount = 0;
        boolean inString = false;
        for (int i = 0; i < len; i++) {
            char c = inner.charAt(i);
            if (c == '"' && (i == 0 || inner.charAt(i - 1) != '\\')) {
                inString = !inString;
            } else if (!inString) {
                if (c == '{') {
                    braceCount++;
                } else if (c == '}') {
                    braceCount--;
                } else if (c == '[') {
                    bracketCount++;
                } else if (c == ']') {
                    bracketCount--;
                } else if (c == ',' && braceCount == 0 && bracketCount == 0) {
                    String elementStr = inner.substring(start, i).trim();
                    if (!elementStr.isEmpty()) {
                        list.add(parseJSONValue(elementStr));
                    }
                    start = i + 1;
                }
            }
        }
        String elementStr = inner.substring(start).trim();
        if (!elementStr.isEmpty()) {
            list.add(parseJSONValue(elementStr));
        }
        return list;
    }

    private static Object parsePrimWords(String value) {
        if (value.equals("null")) return null;
        if (value.equals("true")) return true;
        if (value.equals("false")) return false;
        try {
            return Integer.parseInt(value);
        } catch (NumberFormatException e1) {
            try {
                return Double.parseDouble(value);
            } catch (NumberFormatException e2) {
                return value;
            }
        }
    }

    public static <T> T JSONToObj(String json, Class<T> tempObj) throws Exception {
        Map<String, Object> map = JSONIntoMAP(json);
        T obj = tempObj.getDeclaredConstructor().newInstance();
        for (Field field : tempObj.getDeclaredFields()) {
            field.setAccessible(true);
            Object value = map.get(field.getName());
            if (value instanceof List && field.getType().isArray()) {
                List<?> list = (List<?>) value;
                Class<?> compType = field.getType().getComponentType();
                Object array = Array.newInstance(compType, list.size());
                for (int i = 0; i < list.size(); i++) {
                    Array.set(array, i, list.get(i));
                }
                value = array;
            }
            field.set(obj, value);
        }
        return obj;
    }

    public static String toJSON(Object obj) throws IllegalAccessException {
        StringBuilder json = new StringBuilder("{");
        Field[] fields = obj.getClass().getDeclaredFields();
        for (Field field : fields) {
            field.setAccessible(true);
            json.append("\"").append(field.getName()).append("\":");
            Object value = field.get(obj);
            json.append(Values(value)).append(",");
        }
        if (json.charAt(json.length() - 1) == ',') {
            json.deleteCharAt(json.length() - 1);
        }
        json.append("}");
        return json.toString();
    }

    private static String Values(Object value) throws IllegalAccessException {
        if (value == null) return "null";
        if (value.getClass().isArray()){
            StringBuilder sb = new StringBuilder("[");
            int length = Array.getLength(value);
            for (int i = 0; i < length; i++){
                Object elem = Array.get(value, i);
                sb.append(Values(elem)).append(",");
            }
            if(sb.charAt(sb.length()-1)==',') sb.deleteCharAt(sb.length()-1);
            sb.append("]");
            return sb.toString();
        }
        if (value instanceof Collection){
            StringBuilder sb = new StringBuilder("[");
            for (Object elem : (Collection<?>)value){
                sb.append(Values(elem)).append(",");
            }
            if(sb.charAt(sb.length()-1)==',') sb.deleteCharAt(sb.length()-1);
            sb.append("]");
            return sb.toString();
        }
        if (value instanceof String) return "\"" + value + "\"";
        if (value instanceof  Number || value instanceof Boolean) return value.toString();
        return toJSON(value);
    }

    public static void main(String[] args) throws Exception {
        minUI ui = new minUI();
        String json = "{\"mark\":\"Volvo\",\"model\":\"X90\",\"v\":12, \"crashed_Painted\": false}";
        Map<String, Object> map = JSONIntoMAP(json);

        ui.start("Парсинг мапы");
        System.out.println(": \tРезультат: " + map);
        ui.end("Парсинг мапы");

        class FutureCar {
            public String mark;
            public String model;
            public int v;
            public boolean crashed_Painted;
        }
        FutureCar futureCar = JSONToObj(json, FutureCar.class);
        ui.start("Парсинг объекта");
        System.out.println(": \tРезультат: " + futureCar.mark + ", " + futureCar.model + ", v" + futureCar.v + ", " + futureCar.crashed_Painted);
        ui.end("Парсинг объекта");

        ui.start("JSON");
        String generatedJson = toJSON(futureCar);
        System.out.println(": \tРезультат: " + generatedJson);
        ui.end("JSON");

        ui.start("Запись в файл");
        try {
            FileWriter jsonW = new FileWriter("dealWithIt.json", false);
            jsonW.write(toJSON(futureCar));
            jsonW.close();
            System.out.println(": \tЗаписано!");
            ui.end("Запись в файл");
        } catch (IOException e) {
            System.out.println("Упс! Запись не удалась");
            ui.end("Запись в файл");
        }
    }
}

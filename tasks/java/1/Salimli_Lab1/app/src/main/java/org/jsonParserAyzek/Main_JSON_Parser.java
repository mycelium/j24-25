/*
 * This source file was generated by the Gradle 'init' task
 */

package org.jsonParserAyzek;
import sun.misc.Unsafe;

import java.io.FileWriter;
import java.io.IOException;
import java.lang.reflect.*;
import java.util.*;

class MinUI {
    private static final int length = 40;
    public void start(String ttask){
        System.out.println();
        System.out.println();
        for(int i = 0; i < length; i++){
            System.out.print("\\");
        }
        System.out.print(" ");
        System.out.print(ttask);
        System.out.print(" ");
        for(int i = 0; i < length; i++){
            System.out.print("/");
        }
        System.out.println();
        System.out.println();
    }
    public void end(String task){
        System.out.println();
        for(int i = 0; i < length * 2 + task.length() + 2; i++){
            System.out.print("=");
        }
        System.out.println();
        System.out.println();
    }
}

public class Main_JSON_Parser {

    private static final Unsafe UNSAFE;

    static {
        try {
            Field f = Unsafe.class.getDeclaredField("theUnsafe");
            f.setAccessible(true);
            UNSAFE = (Unsafe) f.get(null);
        } catch (Exception e) {
            throw new RuntimeException("Unsafe", e);
        }
    }

    private static List<Field> fieldList(Class<?> maybeClass){
        List<Field> fields = new ArrayList<>();
        while(maybeClass != null){
            fields.addAll(Arrays.asList(maybeClass.getDeclaredFields()));
            maybeClass = maybeClass.getSuperclass();
        }
        return fields;
    }
    public static Map<String, Object> JSONIntoMAP(String json) {
        json = json.trim();
        if (!json.startsWith("{") || !json.endsWith("}")) {
            throw new IllegalArgumentException("С форматом JSON что-то не так...");
        }
        json = json.substring(1, json.length() - 1).trim();
        Map<String, Object> result = new HashMap<>();

        while (!json.isEmpty()) {
            int colonIndex = json.indexOf(":");
            if (colonIndex == -1) break;

            String key = json.substring(0, colonIndex).trim().replaceAll("\"", "");
            json = json.substring(colonIndex + 1).trim();

            Object value;
            if (json.startsWith("\"")) {
                int endIndex = json.indexOf("\"", 1);
                value = json.substring(1, endIndex);
                json = json.substring(endIndex + 1).trim();
            } else if (json.startsWith("{")) {
                int endIndex = checkBrace1(json);
                value = JSONIntoMAP(json.substring(0, endIndex + 1));
                json = json.substring(endIndex + 1).trim();
            } else if (json.startsWith("[")) {
                int endIndex = checkBrace2(json);
                value = parsingJSON_Array(json.substring(0, endIndex + 1));
                json = json.substring(endIndex + 1).trim();
            } else {
                int endIndex = json.indexOf(",");
                if (endIndex == -1) endIndex = json.length();
                value = parsePrimWords(json.substring(0, endIndex));
                json = json.substring(endIndex).trim();
            }

            result.put(key, value);
            if (json.startsWith(",")) {
                json = json.substring(1).trim();
            }
        }
        return result;
    }

    private static int checkBrace1(String json) {
        int count = 0;
        boolean inStr = false;
        for (int i = 0; i < json.length(); i++) {
            char c = json.charAt(i);
            if (c == '"' && (i == 0 || json.charAt(i - 1) != '\\')) {
                inStr = !inStr;
            }
            if (!inStr) {
                if (c == '{') count++;
                if (c == '}') count--;
                if (count == 0)
                    return i;
            }
        }
        throw new IllegalArgumentException("Забыли закрыть скобки типа {}");
    }

    private static int checkBrace2(String json) {
        int count = 0;
        boolean inStr = false;
        for (int i = 0; i < json.length(); i++) {
            char c = json.charAt(i);
            if (c == '"' && (i == 0 || json.charAt(i - 1) != '\\')) {
                inStr = !inStr;
            }
            if (!inStr) {
                if (c == '[') count++;
                if (c == ']') count--;
                if (count == 0)
                    return i;
            }
        }
        throw new IllegalArgumentException("Забыли закрыть скобки типа []");
    }

    private static Object parseJSONValue(String json) {
        json = json.trim();
        if (json.isEmpty()) return null;
        if (json.startsWith("\"")) {
            StringBuilder sb = new StringBuilder();
            boolean escape = false;
            for (int i = 1; i < json.length(); i++) {
                char c = json.charAt(i);
                if (escape) {
                    sb.append(c);
                    escape = false;
                } else if (c == '\\') {
                    escape = true;
                } else if (c == '"') {
                    return sb.toString();
                } else {
                    sb.append(c);
                }
            }
            return sb.toString();
        } else if (json.startsWith("{")) {
            int endIndex = checkBrace1(json);
            return JSONIntoMAP(json.substring(0, endIndex + 1));
        } else if (json.startsWith("[")) {
            int endIndex = checkBrace2(json);
            return parsingJSON_Array(json.substring(0, endIndex + 1));
        } else {
            return parsePrimWords(json);
        }
    }

    private static List<Object> parsingJSON_Array(String json) {
        if (!json.startsWith("[") || !json.endsWith("]")) {
            throw new IllegalArgumentException("Неправильный формат JSON массива");
        }
        String inner = json.substring(1, json.length() - 1).trim();
        List<Object> list = new ArrayList<>();
        if (inner.isEmpty()) {
            return list;
        }
        int start = 0;
        int len = inner.length();
        int braceCount = 0;
        int bracketCount = 0;
        boolean inString = false;
        for (int i = 0; i < len; i++) {
            char c = inner.charAt(i);
            if (c == '"' && (i == 0 || inner.charAt(i - 1) != '\\')) {
                inString = !inString;
            } else if (!inString) {
                if (c == '{') {
                    braceCount++;
                } else if (c == '}') {
                    braceCount--;
                } else if (c == '[') {
                    bracketCount++;
                } else if (c == ']') {
                    bracketCount--;
                } else if (c == ',' && braceCount == 0 && bracketCount == 0) {
                    String elementStr = inner.substring(start, i).trim();
                    if (!elementStr.isEmpty()) {
                        list.add(parseJSONValue(elementStr));
                    }
                    start = i + 1;
                }
            }
        }
        String elementStr = inner.substring(start).trim();
        if (!elementStr.isEmpty()) {
            list.add(parseJSONValue(elementStr));
        }
        return list;
    }

    private static Object parsePrimWords(String value) {
        if (value.equals("null")) return null;
        if (value.equals("true")) return true;
        if (value.equals("false")) return false;
        try {
            return Integer.parseInt(value);
        } catch (NumberFormatException e1) {
            try {
                return Double.parseDouble(value);
            } catch (NumberFormatException e2) {
                return value;
            }
        }
    }
    private static String mapToJsonString(Map<String, Object> map) throws IllegalAccessException {
        StringBuilder sb = new StringBuilder("{");
        for (Map.Entry<String, Object> entry : map.entrySet()) {
            sb.append("\"").append(entry.getKey()).append("\":");
            Object val = entry.getValue();
            if (val instanceof Map) {
                sb.append(mapToJsonString((Map<String, Object>) val));
            } else if (val instanceof List) {
                sb.append(listToJsonString((List<Object>) val));
            } else if (val instanceof String) {
                sb.append("\"").append(val).append("\"");
            } else {
                sb.append(val);
            }
            sb.append(",");
        }
        if (sb.charAt(sb.length() - 1) == ',')
            sb.deleteCharAt(sb.length() - 1);
        sb.append("}");
        return sb.toString();
    }

    private static String listToJsonString(List<Object> list) throws IllegalAccessException {
        StringBuilder sb = new StringBuilder("[");
        for (Object item : list) {
            if (item instanceof Map) {
                sb.append(mapToJsonString((Map<String, Object>) item));
            } else if (item instanceof List) {
                sb.append(listToJsonString((List<Object>) item));
            } else if (item instanceof String) {
                sb.append("\"").append(item).append("\"");
            } else {
                sb.append(item);
            }
            sb.append(",");
        }
        if (sb.charAt(sb.length() - 1) == ',')
            sb.deleteCharAt(sb.length() - 1);
        sb.append("]");
        return sb.toString();
    }

    public static String toJSON(Object obj) throws IllegalAccessException {
        if (obj == null) return "null";
        StringBuilder json = new StringBuilder("{");
        List<Field> fields = fieldList(obj.getClass());
        for (Field field : fields) {
            field.setAccessible(true);
            json.append("\"").append(field.getName()).append("\":");
            Object value = field.get(obj);
            json.append(Values(value)).append(",");
        }
        if(json.charAt(json.length() -1) == ','){
            json.deleteCharAt(json.length() - 1);
        }
        json.append("}");
        return json.toString();
    }

    public static <T> T JSONToObj(String json, Class<T> tempObj) throws Exception {
        Map<String, Object> map = JSONIntoMAP(json);
        Class<?> justClass = tempObj;
        Object obj;
        try {
            obj = justClass.getDeclaredConstructor().newInstance();
        } catch (NoSuchMethodException e) {
            obj = UNSAFE.allocateInstance(justClass);
        }
        List<Field> fields = fieldList(justClass);
        for (Field field : fields) {
            field.setAccessible(true);
            if (map.containsKey(field.getName())) {
                Object value = map.get(field.getName());
                if (value instanceof Map) {
                    value = JSONToObj(mapToJsonString((Map<String, Object>) value), field.getType());
                } else if (value instanceof List && Collection.class.isAssignableFrom(field.getType())) {
                    List<?> origList = (List<?>) value;
                    List<Object> convertedList = new ArrayList<>();
                    Type genericType = field.getGenericType();
                    Class<?> elementType = Object.class;
                    if (genericType instanceof ParameterizedType) {
                        ParameterizedType pt = (ParameterizedType) genericType;
                        Type[] typeArgs = pt.getActualTypeArguments();
                        if (typeArgs != null && typeArgs.length > 0 && typeArgs[0] instanceof Class) {
                            elementType = (Class<?>) typeArgs[0];
                        }
                    }
                    for (Object elem : origList) {
                        if (elem instanceof Map) {
                            elem = JSONToObj(mapToJsonString((Map<String, Object>) elem), elementType);
                        }
                        convertedList.add(elem);
                    }
                    value = convertedList;
                }
                field.set(obj, value);
            }
        }
        return tempObj.cast(obj);
    }

    private static String Values(Object value) throws IllegalAccessException {
        if (value == null) return "null";
        if (value.getClass().isArray()){
            StringBuilder sb = new StringBuilder("[");
            int length = Array.getLength(value);
            for (int i = 0; i < length; i++){
                Object elem = Array.get(value, i);
                sb.append(Values(elem)).append(",");
            }
            if(sb.charAt(sb.length()-1)==',') sb.deleteCharAt(sb.length()-1);
            sb.append("]");
            return sb.toString();
        }
        if (value instanceof Collection){
            StringBuilder sb = new StringBuilder("[");
            for (Object elem : (Collection<?>)value){
                sb.append(Values(elem)).append(",");
            }
            if(sb.charAt(sb.length()-1)==',') sb.deleteCharAt(sb.length()-1);
            sb.append("]");
            return sb.toString();
        }
        if (value instanceof String) return "\"" + value + "\"";
        if (value instanceof  Number || value instanceof Boolean) return value.toString();
        return toJSON(value);
    }
    ////////////////////////////////////////// Пример из ТГ про котиков 😺 //////////////////////////////////////////////////////////
    public static class AnimalPart {
        String name = "part";
        public String getName() {
            return name;
        }
    }
    public static class Tail extends AnimalPart {
        double lenght = 10.2;
        public Tail() {
            name = "Pretty fluffy tail";
        }
    }
    public static class Claw extends AnimalPart {
        public Claw() {
            name = "claw";
        }
        @Override
        public String getName() {
            return "Sharp claw";
        }
    }
    public static class Paw extends AnimalPart {
        boolean isFront = true;
        List<Claw> claws = new ArrayList<>();
        public Paw(boolean isFront, Claw... claws) {
            name = "paw";
            this.isFront = isFront;
            this.claws.addAll(Arrays.asList(claws));
        }

        @Override
        public String getName() {
            return isFront ? "Front paw" : "Back paw";
        }
    }

    public static class Cat {
        List<AnimalPart> parts = new LinkedList<>();
        public Cat(Tail tail, Paw... paws) {
            parts.add(tail);
            parts.addAll(Arrays.asList(paws));
        }
    }
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    public static void main(String[] args) throws Exception {
        MinUI ui = new MinUI();
        String json = "{\"mark\":\"Volvo\",\"model\":\"X90\",\"v\":12, \"crashed_Painted\": false}";
        Map<String, Object> map = JSONIntoMAP(json);

        ui.start("Парсинг мапы");
        System.out.println(": \tРезультат: " + map);
        ui.end("Парсинг мапы");

        class FutureCar {
            public String mark;
            public String model;
            public int v;
            public boolean crashed_Painted;
            public FutureCar(String mark, String model, int v, boolean crashed) {
                this.mark = mark;
                this.model = model;
                this.v = v;
                this.crashed_Painted = crashed;
            }
        }

        ui.start("Парсинг машинки");
        FutureCar futureCar = JSONToObj(json, FutureCar.class);
        System.out.println(": \tРезультат: "
                + futureCar.mark + ", "
                + futureCar.model + ", v"
                + futureCar.v + ", "
                + futureCar.crashed_Painted);
        ui.end("Парсинг машинки");

        ui.start("JSON");
        String generatedJson = toJSON(futureCar);
        System.out.println(": \tРезультат: " + generatedJson);
        ui.end("JSON");

        ui.start("Запись в файл");
        try {
            FileWriter jsonW = new FileWriter("dealWithIt.json", false);
            jsonW.write(toJSON(futureCar));
            jsonW.close();
            System.out.println(": \tЗаписано!");
            ui.end("Запись в файл");
        } catch (IOException e) {
            System.out.println("Упс! Запись не удалась");
            ui.end("Запись в файл");
        }
        Cat cat = new Cat(
                new Tail(),
                new Paw(true, new Claw(), new Claw(), new Claw(), new Claw()),
                new Paw(true, new Claw(), new Claw(), new Claw(), new Claw()),
                new Paw(false, new Claw(), new Claw(), new Claw(), new Claw()),
                new Paw(false, new Claw(), new Claw(), new Claw(), new Claw())
        );

        ui.start("Сериализация кошки )");
        String catJson = toJSON(cat);
        System.out.println(": \tCat JSON: " + catJson);
        ui.end("Сериализация кошки )");

        ui.start("Десериализация кошки (");
        Cat catParsed = JSONToObj(catJson, Cat.class);
        System.out.println(": \tCat parts:");
        for (AnimalPart part : catParsed.parts) {
            System.out.println("    " + part.getName());
        }
        ui.end("Десериализация кошки (");
        try {
            FileWriter jsonW = new FileWriter("kotiki.json", false);
            jsonW.write(toJSON(cat));
            jsonW.close();
        } catch (IOException e) {
            System.out.println("Упс! Запись не удалась");
        }
    }
}
